package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.UIsetData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UISET_DATA".
*/
public class UIsetDataDao extends AbstractDao<UIsetData, Long> {

    public static final String TABLENAME = "UISET_DATA";

    /**
     * Properties of entity UIsetData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property BtnId = new Property(0, Long.class, "btnId", true, "_id");
        public final static Property Btn_name = new Property(1, String.class, "btn_name", false, "BTN_NAME");
        public final static Property Btn_status = new Property(2, String.class, "btn_status", false, "BTN_STATUS");
    }


    public UIsetDataDao(DaoConfig config) {
        super(config);
    }
    
    public UIsetDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UISET_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: btnId
                "\"BTN_NAME\" TEXT," + // 1: btn_name
                "\"BTN_STATUS\" TEXT);"); // 2: btn_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UISET_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UIsetData entity) {
        stmt.clearBindings();
 
        Long btnId = entity.getBtnId();
        if (btnId != null) {
            stmt.bindLong(1, btnId);
        }
 
        String btn_name = entity.getBtn_name();
        if (btn_name != null) {
            stmt.bindString(2, btn_name);
        }
 
        String btn_status = entity.getBtn_status();
        if (btn_status != null) {
            stmt.bindString(3, btn_status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UIsetData entity) {
        stmt.clearBindings();
 
        Long btnId = entity.getBtnId();
        if (btnId != null) {
            stmt.bindLong(1, btnId);
        }
 
        String btn_name = entity.getBtn_name();
        if (btn_name != null) {
            stmt.bindString(2, btn_name);
        }
 
        String btn_status = entity.getBtn_status();
        if (btn_status != null) {
            stmt.bindString(3, btn_status);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UIsetData readEntity(Cursor cursor, int offset) {
        UIsetData entity = new UIsetData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // btnId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // btn_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // btn_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UIsetData entity, int offset) {
        entity.setBtnId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBtn_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBtn_status(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UIsetData entity, long rowId) {
        entity.setBtnId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UIsetData entity) {
        if(entity != null) {
            return entity.getBtnId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UIsetData entity) {
        return entity.getBtnId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
