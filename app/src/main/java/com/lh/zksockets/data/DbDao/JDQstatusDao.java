package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.JDQstatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JDQSTATUS".
*/
public class JDQstatusDao extends AbstractDao<JDQstatus, Long> {

    public static final String TABLENAME = "JDQSTATUS";

    /**
     * Properties of entity JDQstatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Jdq1 = new Property(1, int.class, "jdq1", false, "JDQ1");
        public final static Property Jdq2 = new Property(2, int.class, "jdq2", false, "JDQ2");
        public final static Property Jdq3 = new Property(3, int.class, "jdq3", false, "JDQ3");
        public final static Property Jdq4 = new Property(4, int.class, "jdq4", false, "JDQ4");
        public final static Property Jdq5 = new Property(5, int.class, "jdq5", false, "JDQ5");
        public final static Property Jdq6 = new Property(6, int.class, "jdq6", false, "JDQ6");
        public final static Property Jdq7 = new Property(7, int.class, "jdq7", false, "JDQ7");
        public final static Property Jdq8 = new Property(8, int.class, "jdq8", false, "JDQ8");
    }


    public JDQstatusDao(DaoConfig config) {
        super(config);
    }
    
    public JDQstatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JDQSTATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"JDQ1\" INTEGER NOT NULL ," + // 1: jdq1
                "\"JDQ2\" INTEGER NOT NULL ," + // 2: jdq2
                "\"JDQ3\" INTEGER NOT NULL ," + // 3: jdq3
                "\"JDQ4\" INTEGER NOT NULL ," + // 4: jdq4
                "\"JDQ5\" INTEGER NOT NULL ," + // 5: jdq5
                "\"JDQ6\" INTEGER NOT NULL ," + // 6: jdq6
                "\"JDQ7\" INTEGER NOT NULL ," + // 7: jdq7
                "\"JDQ8\" INTEGER NOT NULL );"); // 8: jdq8
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JDQSTATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, JDQstatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getJdq1());
        stmt.bindLong(3, entity.getJdq2());
        stmt.bindLong(4, entity.getJdq3());
        stmt.bindLong(5, entity.getJdq4());
        stmt.bindLong(6, entity.getJdq5());
        stmt.bindLong(7, entity.getJdq6());
        stmt.bindLong(8, entity.getJdq7());
        stmt.bindLong(9, entity.getJdq8());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, JDQstatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getJdq1());
        stmt.bindLong(3, entity.getJdq2());
        stmt.bindLong(4, entity.getJdq3());
        stmt.bindLong(5, entity.getJdq4());
        stmt.bindLong(6, entity.getJdq5());
        stmt.bindLong(7, entity.getJdq6());
        stmt.bindLong(8, entity.getJdq7());
        stmt.bindLong(9, entity.getJdq8());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public JDQstatus readEntity(Cursor cursor, int offset) {
        JDQstatus entity = new JDQstatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // jdq1
            cursor.getInt(offset + 2), // jdq2
            cursor.getInt(offset + 3), // jdq3
            cursor.getInt(offset + 4), // jdq4
            cursor.getInt(offset + 5), // jdq5
            cursor.getInt(offset + 6), // jdq6
            cursor.getInt(offset + 7), // jdq7
            cursor.getInt(offset + 8) // jdq8
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, JDQstatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJdq1(cursor.getInt(offset + 1));
        entity.setJdq2(cursor.getInt(offset + 2));
        entity.setJdq3(cursor.getInt(offset + 3));
        entity.setJdq4(cursor.getInt(offset + 4));
        entity.setJdq5(cursor.getInt(offset + 5));
        entity.setJdq6(cursor.getInt(offset + 6));
        entity.setJdq7(cursor.getInt(offset + 7));
        entity.setJdq8(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(JDQstatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(JDQstatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(JDQstatus entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
