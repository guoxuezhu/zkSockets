package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.Lamp;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LAMP".
*/
public class LampDao extends AbstractDao<Lamp, Long> {

    public static final String TABLENAME = "LAMP";

    /**
     * Properties of entity Lamp.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property WorkType = new Property(2, int.class, "workType", false, "WORK_TYPE");
        public final static Property IoSelectId = new Property(3, int.class, "ioSelectId", false, "IO_SELECT_ID");
        public final static Property IoSelectName = new Property(4, String.class, "ioSelectName", false, "IO_SELECT_NAME");
        public final static Property SerialPortSelectId = new Property(5, int.class, "serialPortSelectId", false, "SERIAL_PORT_SELECT_ID");
        public final static Property SerialPortSelectName = new Property(6, String.class, "serialPortSelectName", false, "SERIAL_PORT_SELECT_NAME");
        public final static Property BaudRateSelectId = new Property(7, int.class, "baudRateSelectId", false, "BAUD_RATE_SELECT_ID");
        public final static Property BaudRateSelectName = new Property(8, String.class, "baudRateSelectName", false, "BAUD_RATE_SELECT_NAME");
        public final static Property CheckoutBitSelectId = new Property(9, int.class, "checkoutBitSelectId", false, "CHECKOUT_BIT_SELECT_ID");
        public final static Property CheckoutBitSelectName = new Property(10, String.class, "checkoutBitSelectName", false, "CHECKOUT_BIT_SELECT_NAME");
        public final static Property DataBitSelectId = new Property(11, int.class, "dataBitSelectId", false, "DATA_BIT_SELECT_ID");
        public final static Property DataBitSelectName = new Property(12, String.class, "dataBitSelectName", false, "DATA_BIT_SELECT_NAME");
        public final static Property StopBitSelectId = new Property(13, int.class, "stopBitSelectId", false, "STOP_BIT_SELECT_ID");
        public final static Property StopBitSelectName = new Property(14, String.class, "stopBitSelectName", false, "STOP_BIT_SELECT_NAME");
    }


    public LampDao(DaoConfig config) {
        super(config);
    }
    
    public LampDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LAMP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"WORK_TYPE\" INTEGER NOT NULL ," + // 2: workType
                "\"IO_SELECT_ID\" INTEGER NOT NULL ," + // 3: ioSelectId
                "\"IO_SELECT_NAME\" TEXT," + // 4: ioSelectName
                "\"SERIAL_PORT_SELECT_ID\" INTEGER NOT NULL ," + // 5: serialPortSelectId
                "\"SERIAL_PORT_SELECT_NAME\" TEXT," + // 6: serialPortSelectName
                "\"BAUD_RATE_SELECT_ID\" INTEGER NOT NULL ," + // 7: baudRateSelectId
                "\"BAUD_RATE_SELECT_NAME\" TEXT," + // 8: baudRateSelectName
                "\"CHECKOUT_BIT_SELECT_ID\" INTEGER NOT NULL ," + // 9: checkoutBitSelectId
                "\"CHECKOUT_BIT_SELECT_NAME\" TEXT," + // 10: checkoutBitSelectName
                "\"DATA_BIT_SELECT_ID\" INTEGER NOT NULL ," + // 11: dataBitSelectId
                "\"DATA_BIT_SELECT_NAME\" TEXT," + // 12: dataBitSelectName
                "\"STOP_BIT_SELECT_ID\" INTEGER NOT NULL ," + // 13: stopBitSelectId
                "\"STOP_BIT_SELECT_NAME\" TEXT);"); // 14: stopBitSelectName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LAMP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Lamp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getWorkType());
        stmt.bindLong(4, entity.getIoSelectId());
 
        String ioSelectName = entity.getIoSelectName();
        if (ioSelectName != null) {
            stmt.bindString(5, ioSelectName);
        }
        stmt.bindLong(6, entity.getSerialPortSelectId());
 
        String serialPortSelectName = entity.getSerialPortSelectName();
        if (serialPortSelectName != null) {
            stmt.bindString(7, serialPortSelectName);
        }
        stmt.bindLong(8, entity.getBaudRateSelectId());
 
        String baudRateSelectName = entity.getBaudRateSelectName();
        if (baudRateSelectName != null) {
            stmt.bindString(9, baudRateSelectName);
        }
        stmt.bindLong(10, entity.getCheckoutBitSelectId());
 
        String checkoutBitSelectName = entity.getCheckoutBitSelectName();
        if (checkoutBitSelectName != null) {
            stmt.bindString(11, checkoutBitSelectName);
        }
        stmt.bindLong(12, entity.getDataBitSelectId());
 
        String dataBitSelectName = entity.getDataBitSelectName();
        if (dataBitSelectName != null) {
            stmt.bindString(13, dataBitSelectName);
        }
        stmt.bindLong(14, entity.getStopBitSelectId());
 
        String stopBitSelectName = entity.getStopBitSelectName();
        if (stopBitSelectName != null) {
            stmt.bindString(15, stopBitSelectName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Lamp entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getWorkType());
        stmt.bindLong(4, entity.getIoSelectId());
 
        String ioSelectName = entity.getIoSelectName();
        if (ioSelectName != null) {
            stmt.bindString(5, ioSelectName);
        }
        stmt.bindLong(6, entity.getSerialPortSelectId());
 
        String serialPortSelectName = entity.getSerialPortSelectName();
        if (serialPortSelectName != null) {
            stmt.bindString(7, serialPortSelectName);
        }
        stmt.bindLong(8, entity.getBaudRateSelectId());
 
        String baudRateSelectName = entity.getBaudRateSelectName();
        if (baudRateSelectName != null) {
            stmt.bindString(9, baudRateSelectName);
        }
        stmt.bindLong(10, entity.getCheckoutBitSelectId());
 
        String checkoutBitSelectName = entity.getCheckoutBitSelectName();
        if (checkoutBitSelectName != null) {
            stmt.bindString(11, checkoutBitSelectName);
        }
        stmt.bindLong(12, entity.getDataBitSelectId());
 
        String dataBitSelectName = entity.getDataBitSelectName();
        if (dataBitSelectName != null) {
            stmt.bindString(13, dataBitSelectName);
        }
        stmt.bindLong(14, entity.getStopBitSelectId());
 
        String stopBitSelectName = entity.getStopBitSelectName();
        if (stopBitSelectName != null) {
            stmt.bindString(15, stopBitSelectName);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Lamp readEntity(Cursor cursor, int offset) {
        Lamp entity = new Lamp( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // workType
            cursor.getInt(offset + 3), // ioSelectId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ioSelectName
            cursor.getInt(offset + 5), // serialPortSelectId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // serialPortSelectName
            cursor.getInt(offset + 7), // baudRateSelectId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // baudRateSelectName
            cursor.getInt(offset + 9), // checkoutBitSelectId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // checkoutBitSelectName
            cursor.getInt(offset + 11), // dataBitSelectId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dataBitSelectName
            cursor.getInt(offset + 13), // stopBitSelectId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14) // stopBitSelectName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Lamp entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkType(cursor.getInt(offset + 2));
        entity.setIoSelectId(cursor.getInt(offset + 3));
        entity.setIoSelectName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSerialPortSelectId(cursor.getInt(offset + 5));
        entity.setSerialPortSelectName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBaudRateSelectId(cursor.getInt(offset + 7));
        entity.setBaudRateSelectName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCheckoutBitSelectId(cursor.getInt(offset + 9));
        entity.setCheckoutBitSelectName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDataBitSelectId(cursor.getInt(offset + 11));
        entity.setDataBitSelectName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStopBitSelectId(cursor.getInt(offset + 13));
        entity.setStopBitSelectName(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Lamp entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Lamp entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Lamp entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
