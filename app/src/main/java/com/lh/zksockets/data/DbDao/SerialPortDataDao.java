package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.SerialPortData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIAL_PORT_DATA".
*/
public class SerialPortDataDao extends AbstractDao<SerialPortData, Long> {

    public static final String TABLENAME = "SERIAL_PORT_DATA";

    /**
     * Properties of entity SerialPortData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SerialPortName = new Property(1, String.class, "serialPortName", false, "SERIAL_PORT_NAME");
        public final static Property DeviceName = new Property(2, String.class, "deviceName", false, "DEVICE_NAME");
        public final static Property BaudRateId = new Property(3, int.class, "baudRateId", false, "BAUD_RATE_ID");
        public final static Property BaudRate = new Property(4, String.class, "baudRate", false, "BAUD_RATE");
        public final static Property CheckoutBitId = new Property(5, int.class, "checkoutBitId", false, "CHECKOUT_BIT_ID");
        public final static Property CheckoutBit = new Property(6, String.class, "checkoutBit", false, "CHECKOUT_BIT");
        public final static Property DataBitId = new Property(7, int.class, "dataBitId", false, "DATA_BIT_ID");
        public final static Property DataBit = new Property(8, String.class, "dataBit", false, "DATA_BIT");
        public final static Property StopBitId = new Property(9, int.class, "stopBitId", false, "STOP_BIT_ID");
        public final static Property StopBit = new Property(10, String.class, "stopBit", false, "STOP_BIT");
        public final static Property JinZhi = new Property(11, int.class, "jinZhi", false, "JIN_ZHI");
    }


    public SerialPortDataDao(DaoConfig config) {
        super(config);
    }
    
    public SerialPortDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIAL_PORT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"SERIAL_PORT_NAME\" TEXT," + // 1: serialPortName
                "\"DEVICE_NAME\" TEXT," + // 2: deviceName
                "\"BAUD_RATE_ID\" INTEGER NOT NULL ," + // 3: baudRateId
                "\"BAUD_RATE\" TEXT," + // 4: baudRate
                "\"CHECKOUT_BIT_ID\" INTEGER NOT NULL ," + // 5: checkoutBitId
                "\"CHECKOUT_BIT\" TEXT," + // 6: checkoutBit
                "\"DATA_BIT_ID\" INTEGER NOT NULL ," + // 7: dataBitId
                "\"DATA_BIT\" TEXT," + // 8: dataBit
                "\"STOP_BIT_ID\" INTEGER NOT NULL ," + // 9: stopBitId
                "\"STOP_BIT\" TEXT," + // 10: stopBit
                "\"JIN_ZHI\" INTEGER NOT NULL );"); // 11: jinZhi
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIAL_PORT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SerialPortData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialPortName = entity.getSerialPortName();
        if (serialPortName != null) {
            stmt.bindString(2, serialPortName);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
        stmt.bindLong(4, entity.getBaudRateId());
 
        String baudRate = entity.getBaudRate();
        if (baudRate != null) {
            stmt.bindString(5, baudRate);
        }
        stmt.bindLong(6, entity.getCheckoutBitId());
 
        String checkoutBit = entity.getCheckoutBit();
        if (checkoutBit != null) {
            stmt.bindString(7, checkoutBit);
        }
        stmt.bindLong(8, entity.getDataBitId());
 
        String dataBit = entity.getDataBit();
        if (dataBit != null) {
            stmt.bindString(9, dataBit);
        }
        stmt.bindLong(10, entity.getStopBitId());
 
        String stopBit = entity.getStopBit();
        if (stopBit != null) {
            stmt.bindString(11, stopBit);
        }
        stmt.bindLong(12, entity.getJinZhi());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SerialPortData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String serialPortName = entity.getSerialPortName();
        if (serialPortName != null) {
            stmt.bindString(2, serialPortName);
        }
 
        String deviceName = entity.getDeviceName();
        if (deviceName != null) {
            stmt.bindString(3, deviceName);
        }
        stmt.bindLong(4, entity.getBaudRateId());
 
        String baudRate = entity.getBaudRate();
        if (baudRate != null) {
            stmt.bindString(5, baudRate);
        }
        stmt.bindLong(6, entity.getCheckoutBitId());
 
        String checkoutBit = entity.getCheckoutBit();
        if (checkoutBit != null) {
            stmt.bindString(7, checkoutBit);
        }
        stmt.bindLong(8, entity.getDataBitId());
 
        String dataBit = entity.getDataBit();
        if (dataBit != null) {
            stmt.bindString(9, dataBit);
        }
        stmt.bindLong(10, entity.getStopBitId());
 
        String stopBit = entity.getStopBit();
        if (stopBit != null) {
            stmt.bindString(11, stopBit);
        }
        stmt.bindLong(12, entity.getJinZhi());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SerialPortData readEntity(Cursor cursor, int offset) {
        SerialPortData entity = new SerialPortData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // serialPortName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // deviceName
            cursor.getInt(offset + 3), // baudRateId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // baudRate
            cursor.getInt(offset + 5), // checkoutBitId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkoutBit
            cursor.getInt(offset + 7), // dataBitId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dataBit
            cursor.getInt(offset + 9), // stopBitId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stopBit
            cursor.getInt(offset + 11) // jinZhi
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SerialPortData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSerialPortName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDeviceName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBaudRateId(cursor.getInt(offset + 3));
        entity.setBaudRate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCheckoutBitId(cursor.getInt(offset + 5));
        entity.setCheckoutBit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDataBitId(cursor.getInt(offset + 7));
        entity.setDataBit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setStopBitId(cursor.getInt(offset + 9));
        entity.setStopBit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setJinZhi(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SerialPortData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SerialPortData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SerialPortData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
