package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.IoPortData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IO_PORT_DATA".
*/
public class IoPortDataDao extends AbstractDao<IoPortData, Long> {

    public static final String TABLENAME = "IO_PORT_DATA";

    /**
     * Properties of entity IoPortData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IoName = new Property(1, String.class, "ioName", false, "IO_NAME");
        public final static Property Vgd = new Property(2, boolean.class, "Vgd", false, "VGD");
        public final static Property StrML = new Property(3, String.class, "strML", false, "STR_ML");
    }


    public IoPortDataDao(DaoConfig config) {
        super(config);
    }
    
    public IoPortDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IO_PORT_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IO_NAME\" TEXT," + // 1: ioName
                "\"VGD\" INTEGER NOT NULL ," + // 2: Vgd
                "\"STR_ML\" TEXT);"); // 3: strML
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IO_PORT_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IoPortData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ioName = entity.getIoName();
        if (ioName != null) {
            stmt.bindString(2, ioName);
        }
        stmt.bindLong(3, entity.getVgd() ? 1L: 0L);
 
        String strML = entity.getStrML();
        if (strML != null) {
            stmt.bindString(4, strML);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IoPortData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ioName = entity.getIoName();
        if (ioName != null) {
            stmt.bindString(2, ioName);
        }
        stmt.bindLong(3, entity.getVgd() ? 1L: 0L);
 
        String strML = entity.getStrML();
        if (strML != null) {
            stmt.bindString(4, strML);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IoPortData readEntity(Cursor cursor, int offset) {
        IoPortData entity = new IoPortData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ioName
            cursor.getShort(offset + 2) != 0, // Vgd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // strML
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IoPortData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIoName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setVgd(cursor.getShort(offset + 2) != 0);
        entity.setStrML(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IoPortData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IoPortData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IoPortData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
