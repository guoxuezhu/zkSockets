package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.DangerStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DANGER_STATUS".
*/
public class DangerStatusDao extends AbstractDao<DangerStatus, Long> {

    public static final String TABLENAME = "DANGER_STATUS";

    /**
     * Properties of entity DangerStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DangerStatus1 = new Property(1, int.class, "dangerStatus1", false, "DANGER_STATUS1");
        public final static Property DangerStatus2 = new Property(2, int.class, "dangerStatus2", false, "DANGER_STATUS2");
        public final static Property DangerStatus3 = new Property(3, int.class, "dangerStatus3", false, "DANGER_STATUS3");
        public final static Property DangerStatus4 = new Property(4, int.class, "dangerStatus4", false, "DANGER_STATUS4");
    }


    public DangerStatusDao(DaoConfig config) {
        super(config);
    }
    
    public DangerStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DANGER_STATUS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"DANGER_STATUS1\" INTEGER NOT NULL ," + // 1: dangerStatus1
                "\"DANGER_STATUS2\" INTEGER NOT NULL ," + // 2: dangerStatus2
                "\"DANGER_STATUS3\" INTEGER NOT NULL ," + // 3: dangerStatus3
                "\"DANGER_STATUS4\" INTEGER NOT NULL );"); // 4: dangerStatus4
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DANGER_STATUS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DangerStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDangerStatus1());
        stmt.bindLong(3, entity.getDangerStatus2());
        stmt.bindLong(4, entity.getDangerStatus3());
        stmt.bindLong(5, entity.getDangerStatus4());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DangerStatus entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getDangerStatus1());
        stmt.bindLong(3, entity.getDangerStatus2());
        stmt.bindLong(4, entity.getDangerStatus3());
        stmt.bindLong(5, entity.getDangerStatus4());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DangerStatus readEntity(Cursor cursor, int offset) {
        DangerStatus entity = new DangerStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // dangerStatus1
            cursor.getInt(offset + 2), // dangerStatus2
            cursor.getInt(offset + 3), // dangerStatus3
            cursor.getInt(offset + 4) // dangerStatus4
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DangerStatus entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDangerStatus1(cursor.getInt(offset + 1));
        entity.setDangerStatus2(cursor.getInt(offset + 2));
        entity.setDangerStatus3(cursor.getInt(offset + 3));
        entity.setDangerStatus4(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DangerStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DangerStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DangerStatus entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
