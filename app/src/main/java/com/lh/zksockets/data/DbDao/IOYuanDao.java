package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.IOYuan;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IOYUAN".
*/
public class IOYuanDao extends AbstractDao<IOYuan, Long> {

    public static final String TABLENAME = "IOYUAN";

    /**
     * Properties of entity IOYuan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property IsOK = new Property(2, boolean.class, "isOK", false, "IS_OK");
        public final static Property OutId = new Property(3, int.class, "outId", false, "OUT_ID");
        public final static Property OutName = new Property(4, String.class, "outName", false, "OUT_NAME");
        public final static Property SendTime = new Property(5, int.class, "sendTime", false, "SEND_TIME");
    }


    public IOYuanDao(DaoConfig config) {
        super(config);
    }
    
    public IOYuanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IOYUAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"IS_OK\" INTEGER NOT NULL ," + // 2: isOK
                "\"OUT_ID\" INTEGER NOT NULL ," + // 3: outId
                "\"OUT_NAME\" TEXT," + // 4: outName
                "\"SEND_TIME\" INTEGER NOT NULL );"); // 5: sendTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IOYUAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IOYuan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsOK() ? 1L: 0L);
        stmt.bindLong(4, entity.getOutId());
 
        String outName = entity.getOutName();
        if (outName != null) {
            stmt.bindString(5, outName);
        }
        stmt.bindLong(6, entity.getSendTime());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IOYuan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getIsOK() ? 1L: 0L);
        stmt.bindLong(4, entity.getOutId());
 
        String outName = entity.getOutName();
        if (outName != null) {
            stmt.bindString(5, outName);
        }
        stmt.bindLong(6, entity.getSendTime());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public IOYuan readEntity(Cursor cursor, int offset) {
        IOYuan entity = new IOYuan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getShort(offset + 2) != 0, // isOK
            cursor.getInt(offset + 3), // outId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // outName
            cursor.getInt(offset + 5) // sendTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IOYuan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsOK(cursor.getShort(offset + 2) != 0);
        entity.setOutId(cursor.getInt(offset + 3));
        entity.setOutName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSendTime(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IOYuan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IOYuan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IOYuan entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
