package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.WuangguanInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WUANGGUAN_INFO".
*/
public class WuangguanInfoDao extends AbstractDao<WuangguanInfo, Long> {

    public static final String TABLENAME = "WUANGGUAN_INFO";

    /**
     * Properties of entity WuangguanInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Wg_id = new Property(0, Long.class, "wg_id", true, "_id");
        public final static Property Wg_ip = new Property(1, String.class, "wg_ip", false, "WG_IP");
        public final static Property Wg_port = new Property(2, int.class, "wg_port", false, "WG_PORT");
        public final static Property Wg_status = new Property(3, int.class, "wg_status", false, "WG_STATUS");
    }


    public WuangguanInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WuangguanInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WUANGGUAN_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: wg_id
                "\"WG_IP\" TEXT," + // 1: wg_ip
                "\"WG_PORT\" INTEGER NOT NULL ," + // 2: wg_port
                "\"WG_STATUS\" INTEGER NOT NULL );"); // 3: wg_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WUANGGUAN_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WuangguanInfo entity) {
        stmt.clearBindings();
 
        Long wg_id = entity.getWg_id();
        if (wg_id != null) {
            stmt.bindLong(1, wg_id);
        }
 
        String wg_ip = entity.getWg_ip();
        if (wg_ip != null) {
            stmt.bindString(2, wg_ip);
        }
        stmt.bindLong(3, entity.getWg_port());
        stmt.bindLong(4, entity.getWg_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WuangguanInfo entity) {
        stmt.clearBindings();
 
        Long wg_id = entity.getWg_id();
        if (wg_id != null) {
            stmt.bindLong(1, wg_id);
        }
 
        String wg_ip = entity.getWg_ip();
        if (wg_ip != null) {
            stmt.bindString(2, wg_ip);
        }
        stmt.bindLong(3, entity.getWg_port());
        stmt.bindLong(4, entity.getWg_status());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WuangguanInfo readEntity(Cursor cursor, int offset) {
        WuangguanInfo entity = new WuangguanInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // wg_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wg_ip
            cursor.getInt(offset + 2), // wg_port
            cursor.getInt(offset + 3) // wg_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WuangguanInfo entity, int offset) {
        entity.setWg_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWg_ip(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWg_port(cursor.getInt(offset + 2));
        entity.setWg_status(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WuangguanInfo entity, long rowId) {
        entity.setWg_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WuangguanInfo entity) {
        if(entity != null) {
            return entity.getWg_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WuangguanInfo entity) {
        return entity.getWg_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
