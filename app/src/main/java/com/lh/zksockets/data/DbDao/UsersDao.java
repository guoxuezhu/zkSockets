package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.Users;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USERS".
*/
public class UsersDao extends AbstractDao<Users, Long> {

    public static final String TABLENAME = "USERS";

    /**
     * Properties of entity Users.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Username = new Property(1, String.class, "username", false, "USERNAME");
        public final static Property UserPaw = new Property(2, String.class, "userPaw", false, "USER_PAW");
        public final static Property Usertype = new Property(3, int.class, "usertype", false, "USERTYPE");
        public final static Property User_permission = new Property(4, int.class, "user_permission", false, "USER_PERMISSION");
        public final static Property Login_time = new Property(5, Long.class, "login_time", false, "LOGIN_TIME");
        public final static Property Login_count = new Property(6, int.class, "login_count", false, "LOGIN_COUNT");
        public final static Property User_status = new Property(7, int.class, "user_status", false, "USER_STATUS");
    }


    public UsersDao(DaoConfig config) {
        super(config);
    }
    
    public UsersDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USERS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USERNAME\" TEXT," + // 1: username
                "\"USER_PAW\" TEXT," + // 2: userPaw
                "\"USERTYPE\" INTEGER NOT NULL ," + // 3: usertype
                "\"USER_PERMISSION\" INTEGER NOT NULL ," + // 4: user_permission
                "\"LOGIN_TIME\" INTEGER," + // 5: login_time
                "\"LOGIN_COUNT\" INTEGER NOT NULL ," + // 6: login_count
                "\"USER_STATUS\" INTEGER NOT NULL );"); // 7: user_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USERS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String userPaw = entity.getUserPaw();
        if (userPaw != null) {
            stmt.bindString(3, userPaw);
        }
        stmt.bindLong(4, entity.getUsertype());
        stmt.bindLong(5, entity.getUser_permission());
 
        Long login_time = entity.getLogin_time();
        if (login_time != null) {
            stmt.bindLong(6, login_time);
        }
        stmt.bindLong(7, entity.getLogin_count());
        stmt.bindLong(8, entity.getUser_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Users entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String username = entity.getUsername();
        if (username != null) {
            stmt.bindString(2, username);
        }
 
        String userPaw = entity.getUserPaw();
        if (userPaw != null) {
            stmt.bindString(3, userPaw);
        }
        stmt.bindLong(4, entity.getUsertype());
        stmt.bindLong(5, entity.getUser_permission());
 
        Long login_time = entity.getLogin_time();
        if (login_time != null) {
            stmt.bindLong(6, login_time);
        }
        stmt.bindLong(7, entity.getLogin_count());
        stmt.bindLong(8, entity.getUser_status());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Users readEntity(Cursor cursor, int offset) {
        Users entity = new Users( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // username
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPaw
            cursor.getInt(offset + 3), // usertype
            cursor.getInt(offset + 4), // user_permission
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // login_time
            cursor.getInt(offset + 6), // login_count
            cursor.getInt(offset + 7) // user_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Users entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUsername(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPaw(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUsertype(cursor.getInt(offset + 3));
        entity.setUser_permission(cursor.getInt(offset + 4));
        entity.setLogin_time(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setLogin_count(cursor.getInt(offset + 6));
        entity.setUser_status(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Users entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Users entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Users entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
