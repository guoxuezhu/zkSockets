package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.Computer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPUTER".
*/
public class ComputerDao extends AbstractDao<Computer, Void> {

    public static final String TABLENAME = "COMPUTER";

    /**
     * Properties of entity Computer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IP = new Property(0, String.class, "IP", false, "IP");
        public final static Property PORT = new Property(1, String.class, "PORT", false, "PORT");
        public final static Property UserName = new Property(2, String.class, "userName", false, "USER_NAME");
        public final static Property Password = new Property(3, String.class, "Password", false, "PASSWORD");
        public final static Property OpenCommand = new Property(4, String.class, "openCommand", false, "OPEN_COMMAND");
        public final static Property ClosedCommand = new Property(5, String.class, "closedCommand", false, "CLOSED_COMMAND");
    }


    public ComputerDao(DaoConfig config) {
        super(config);
    }
    
    public ComputerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPUTER\" (" + //
                "\"IP\" TEXT," + // 0: IP
                "\"PORT\" TEXT," + // 1: PORT
                "\"USER_NAME\" TEXT," + // 2: userName
                "\"PASSWORD\" TEXT," + // 3: Password
                "\"OPEN_COMMAND\" TEXT," + // 4: openCommand
                "\"CLOSED_COMMAND\" TEXT);"); // 5: closedCommand
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPUTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Computer entity) {
        stmt.clearBindings();
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(1, IP);
        }
 
        String PORT = entity.getPORT();
        if (PORT != null) {
            stmt.bindString(2, PORT);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(4, Password);
        }
 
        String openCommand = entity.getOpenCommand();
        if (openCommand != null) {
            stmt.bindString(5, openCommand);
        }
 
        String closedCommand = entity.getClosedCommand();
        if (closedCommand != null) {
            stmt.bindString(6, closedCommand);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Computer entity) {
        stmt.clearBindings();
 
        String IP = entity.getIP();
        if (IP != null) {
            stmt.bindString(1, IP);
        }
 
        String PORT = entity.getPORT();
        if (PORT != null) {
            stmt.bindString(2, PORT);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(3, userName);
        }
 
        String Password = entity.getPassword();
        if (Password != null) {
            stmt.bindString(4, Password);
        }
 
        String openCommand = entity.getOpenCommand();
        if (openCommand != null) {
            stmt.bindString(5, openCommand);
        }
 
        String closedCommand = entity.getClosedCommand();
        if (closedCommand != null) {
            stmt.bindString(6, closedCommand);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Computer readEntity(Cursor cursor, int offset) {
        Computer entity = new Computer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // IP
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // PORT
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Password
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // openCommand
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // closedCommand
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Computer entity, int offset) {
        entity.setIP(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPORT(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOpenCommand(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setClosedCommand(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Computer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Computer entity) {
        return null;
    }

    @Override
    public boolean hasKey(Computer entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
