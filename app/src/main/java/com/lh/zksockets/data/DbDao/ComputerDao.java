package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.Computer;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPUTER".
*/
public class ComputerDao extends AbstractDao<Computer, Void> {

    public static final String TABLENAME = "COMPUTER";

    /**
     * Properties of entity Computer.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Dn_ip = new Property(0, String.class, "dn_ip", false, "DN_IP");
        public final static Property Dn_port = new Property(1, String.class, "dn_port", false, "DN_PORT");
        public final static Property Dn_ml = new Property(2, String.class, "dn_ml", false, "DN_ML");
        public final static Property Dn_status = new Property(3, String.class, "dn_status", false, "DN_STATUS");
    }


    public ComputerDao(DaoConfig config) {
        super(config);
    }
    
    public ComputerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPUTER\" (" + //
                "\"DN_IP\" TEXT," + // 0: dn_ip
                "\"DN_PORT\" TEXT," + // 1: dn_port
                "\"DN_ML\" TEXT," + // 2: dn_ml
                "\"DN_STATUS\" TEXT);"); // 3: dn_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPUTER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Computer entity) {
        stmt.clearBindings();
 
        String dn_ip = entity.getDn_ip();
        if (dn_ip != null) {
            stmt.bindString(1, dn_ip);
        }
 
        String dn_port = entity.getDn_port();
        if (dn_port != null) {
            stmt.bindString(2, dn_port);
        }
 
        String dn_ml = entity.getDn_ml();
        if (dn_ml != null) {
            stmt.bindString(3, dn_ml);
        }
 
        String dn_status = entity.getDn_status();
        if (dn_status != null) {
            stmt.bindString(4, dn_status);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Computer entity) {
        stmt.clearBindings();
 
        String dn_ip = entity.getDn_ip();
        if (dn_ip != null) {
            stmt.bindString(1, dn_ip);
        }
 
        String dn_port = entity.getDn_port();
        if (dn_port != null) {
            stmt.bindString(2, dn_port);
        }
 
        String dn_ml = entity.getDn_ml();
        if (dn_ml != null) {
            stmt.bindString(3, dn_ml);
        }
 
        String dn_status = entity.getDn_status();
        if (dn_status != null) {
            stmt.bindString(4, dn_status);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Computer readEntity(Cursor cursor, int offset) {
        Computer entity = new Computer( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // dn_ip
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dn_port
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dn_ml
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // dn_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Computer entity, int offset) {
        entity.setDn_ip(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDn_port(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDn_ml(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDn_status(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Computer entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Computer entity) {
        return null;
    }

    @Override
    public boolean hasKey(Computer entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
