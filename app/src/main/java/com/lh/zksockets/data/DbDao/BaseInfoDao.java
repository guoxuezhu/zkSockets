package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.BaseInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BASE_INFO".
*/
public class BaseInfoDao extends AbstractDao<BaseInfo, Void> {

    public static final String TABLENAME = "BASE_INFO";

    /**
     * Properties of entity BaseInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ClassRoom = new Property(0, String.class, "classRoom", false, "CLASS_ROOM");
        public final static Property Mqttuser = new Property(1, String.class, "mqttuser", false, "MQTTUSER");
        public final static Property Mqttpassword = new Property(2, String.class, "mqttpassword", false, "MQTTPASSWORD");
        public final static Property Uuid = new Property(3, String.class, "uuid", false, "UUID");
    }


    public BaseInfoDao(DaoConfig config) {
        super(config);
    }
    
    public BaseInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASE_INFO\" (" + //
                "\"CLASS_ROOM\" TEXT," + // 0: classRoom
                "\"MQTTUSER\" TEXT," + // 1: mqttuser
                "\"MQTTPASSWORD\" TEXT," + // 2: mqttpassword
                "\"UUID\" TEXT);"); // 3: uuid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BaseInfo entity) {
        stmt.clearBindings();
 
        String classRoom = entity.getClassRoom();
        if (classRoom != null) {
            stmt.bindString(1, classRoom);
        }
 
        String mqttuser = entity.getMqttuser();
        if (mqttuser != null) {
            stmt.bindString(2, mqttuser);
        }
 
        String mqttpassword = entity.getMqttpassword();
        if (mqttpassword != null) {
            stmt.bindString(3, mqttpassword);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BaseInfo entity) {
        stmt.clearBindings();
 
        String classRoom = entity.getClassRoom();
        if (classRoom != null) {
            stmt.bindString(1, classRoom);
        }
 
        String mqttuser = entity.getMqttuser();
        if (mqttuser != null) {
            stmt.bindString(2, mqttuser);
        }
 
        String mqttpassword = entity.getMqttpassword();
        if (mqttpassword != null) {
            stmt.bindString(3, mqttpassword);
        }
 
        String uuid = entity.getUuid();
        if (uuid != null) {
            stmt.bindString(4, uuid);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public BaseInfo readEntity(Cursor cursor, int offset) {
        BaseInfo entity = new BaseInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // classRoom
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mqttuser
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mqttpassword
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // uuid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BaseInfo entity, int offset) {
        entity.setClassRoom(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMqttuser(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMqttpassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUuid(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(BaseInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(BaseInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(BaseInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
