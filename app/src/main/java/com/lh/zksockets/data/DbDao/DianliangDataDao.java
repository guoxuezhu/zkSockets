package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.DianliangData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DIANLIANG_DATA".
*/
public class DianliangDataDao extends AbstractDao<DianliangData, Long> {

    public static final String TABLENAME = "DIANLIANG_DATA";

    /**
     * Properties of entity DianliangData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Dn_kwh = new Property(2, String.class, "dn_kwh", false, "DN_KWH");
        public final static Property Dn_v = new Property(3, String.class, "dn_v", false, "DN_V");
        public final static Property Dn_a = new Property(4, String.class, "dn_a", false, "DN_A");
        public final static Property Dn_w = new Property(5, String.class, "dn_w", false, "DN_W");
        public final static Property Dn_w_zong = new Property(6, String.class, "dn_w_zong", false, "DN_W_ZONG");
        public final static Property IntMsg = new Property(7, int.class, "intMsg", false, "INT_MSG");
    }


    public DianliangDataDao(DaoConfig config) {
        super(config);
    }
    
    public DianliangDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DIANLIANG_DATA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"DN_KWH\" TEXT," + // 2: dn_kwh
                "\"DN_V\" TEXT," + // 3: dn_v
                "\"DN_A\" TEXT," + // 4: dn_a
                "\"DN_W\" TEXT," + // 5: dn_w
                "\"DN_W_ZONG\" TEXT," + // 6: dn_w_zong
                "\"INT_MSG\" INTEGER NOT NULL );"); // 7: intMsg
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DIANLIANG_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DianliangData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dn_kwh = entity.getDn_kwh();
        if (dn_kwh != null) {
            stmt.bindString(3, dn_kwh);
        }
 
        String dn_v = entity.getDn_v();
        if (dn_v != null) {
            stmt.bindString(4, dn_v);
        }
 
        String dn_a = entity.getDn_a();
        if (dn_a != null) {
            stmt.bindString(5, dn_a);
        }
 
        String dn_w = entity.getDn_w();
        if (dn_w != null) {
            stmt.bindString(6, dn_w);
        }
 
        String dn_w_zong = entity.getDn_w_zong();
        if (dn_w_zong != null) {
            stmt.bindString(7, dn_w_zong);
        }
        stmt.bindLong(8, entity.getIntMsg());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DianliangData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String dn_kwh = entity.getDn_kwh();
        if (dn_kwh != null) {
            stmt.bindString(3, dn_kwh);
        }
 
        String dn_v = entity.getDn_v();
        if (dn_v != null) {
            stmt.bindString(4, dn_v);
        }
 
        String dn_a = entity.getDn_a();
        if (dn_a != null) {
            stmt.bindString(5, dn_a);
        }
 
        String dn_w = entity.getDn_w();
        if (dn_w != null) {
            stmt.bindString(6, dn_w);
        }
 
        String dn_w_zong = entity.getDn_w_zong();
        if (dn_w_zong != null) {
            stmt.bindString(7, dn_w_zong);
        }
        stmt.bindLong(8, entity.getIntMsg());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DianliangData readEntity(Cursor cursor, int offset) {
        DianliangData entity = new DianliangData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dn_kwh
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dn_v
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dn_a
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dn_w
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // dn_w_zong
            cursor.getInt(offset + 7) // intMsg
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DianliangData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDn_kwh(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDn_v(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDn_a(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDn_w(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDn_w_zong(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntMsg(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DianliangData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DianliangData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DianliangData entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
