package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.IcCard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IC_CARD".
*/
public class IcCardDao extends AbstractDao<IcCard, Long> {

    public static final String TABLENAME = "IC_CARD";

    /**
     * Properties of entity IcCard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property WorkNum = new Property(0, String.class, "workNum", false, "WORK_NUM");
        public final static Property IcType = new Property(1, int.class, "icType", false, "IC_TYPE");
        public final static Property TerName = new Property(2, String.class, "terName", false, "TER_NAME");
        public final static Property Department = new Property(3, String.class, "department", false, "DEPARTMENT");
        public final static Property CardNum = new Property(4, Long.class, "cardNum", true, "_id");
        public final static Property UpdataTime = new Property(5, String.class, "updataTime", false, "UPDATA_TIME");
    }


    public IcCardDao(DaoConfig config) {
        super(config);
    }
    
    public IcCardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IC_CARD\" (" + //
                "\"WORK_NUM\" TEXT," + // 0: workNum
                "\"IC_TYPE\" INTEGER NOT NULL ," + // 1: icType
                "\"TER_NAME\" TEXT," + // 2: terName
                "\"DEPARTMENT\" TEXT," + // 3: department
                "\"_id\" INTEGER PRIMARY KEY ," + // 4: cardNum
                "\"UPDATA_TIME\" TEXT);"); // 5: updataTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IC_CARD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IcCard entity) {
        stmt.clearBindings();
 
        String workNum = entity.getWorkNum();
        if (workNum != null) {
            stmt.bindString(1, workNum);
        }
        stmt.bindLong(2, entity.getIcType());
 
        String terName = entity.getTerName();
        if (terName != null) {
            stmt.bindString(3, terName);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        Long cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindLong(5, cardNum);
        }
 
        String updataTime = entity.getUpdataTime();
        if (updataTime != null) {
            stmt.bindString(6, updataTime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IcCard entity) {
        stmt.clearBindings();
 
        String workNum = entity.getWorkNum();
        if (workNum != null) {
            stmt.bindString(1, workNum);
        }
        stmt.bindLong(2, entity.getIcType());
 
        String terName = entity.getTerName();
        if (terName != null) {
            stmt.bindString(3, terName);
        }
 
        String department = entity.getDepartment();
        if (department != null) {
            stmt.bindString(4, department);
        }
 
        Long cardNum = entity.getCardNum();
        if (cardNum != null) {
            stmt.bindLong(5, cardNum);
        }
 
        String updataTime = entity.getUpdataTime();
        if (updataTime != null) {
            stmt.bindString(6, updataTime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4);
    }    

    @Override
    public IcCard readEntity(Cursor cursor, int offset) {
        IcCard entity = new IcCard( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // workNum
            cursor.getInt(offset + 1), // icType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // terName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // department
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // cardNum
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // updataTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IcCard entity, int offset) {
        entity.setWorkNum(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setIcType(cursor.getInt(offset + 1));
        entity.setTerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDepartment(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCardNum(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setUpdataTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IcCard entity, long rowId) {
        entity.setCardNum(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IcCard entity) {
        if(entity != null) {
            return entity.getCardNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IcCard entity) {
        return entity.getCardNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
