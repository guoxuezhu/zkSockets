package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.MicDatas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MIC_DATAS".
*/
public class MicDatasDao extends AbstractDao<MicDatas, Void> {

    public static final String TABLENAME = "MIC_DATAS";

    /**
     * Properties of entity MicDatas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mic_a = new Property(0, String.class, "mic_a", false, "MIC_A");
        public final static Property Mic_a_status = new Property(1, int.class, "mic_a_status", false, "MIC_A_STATUS");
        public final static Property Mic_b = new Property(2, String.class, "mic_b", false, "MIC_B");
        public final static Property Mic_b_status = new Property(3, int.class, "mic_b_status", false, "MIC_B_STATUS");
        public final static Property Mic_c = new Property(4, String.class, "mic_c", false, "MIC_C");
        public final static Property Mic_c_status = new Property(5, int.class, "mic_c_status", false, "MIC_C_STATUS");
    }


    public MicDatasDao(DaoConfig config) {
        super(config);
    }
    
    public MicDatasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MIC_DATAS\" (" + //
                "\"MIC_A\" TEXT," + // 0: mic_a
                "\"MIC_A_STATUS\" INTEGER NOT NULL ," + // 1: mic_a_status
                "\"MIC_B\" TEXT," + // 2: mic_b
                "\"MIC_B_STATUS\" INTEGER NOT NULL ," + // 3: mic_b_status
                "\"MIC_C\" TEXT," + // 4: mic_c
                "\"MIC_C_STATUS\" INTEGER NOT NULL );"); // 5: mic_c_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MIC_DATAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MicDatas entity) {
        stmt.clearBindings();
 
        String mic_a = entity.getMic_a();
        if (mic_a != null) {
            stmt.bindString(1, mic_a);
        }
        stmt.bindLong(2, entity.getMic_a_status());
 
        String mic_b = entity.getMic_b();
        if (mic_b != null) {
            stmt.bindString(3, mic_b);
        }
        stmt.bindLong(4, entity.getMic_b_status());
 
        String mic_c = entity.getMic_c();
        if (mic_c != null) {
            stmt.bindString(5, mic_c);
        }
        stmt.bindLong(6, entity.getMic_c_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MicDatas entity) {
        stmt.clearBindings();
 
        String mic_a = entity.getMic_a();
        if (mic_a != null) {
            stmt.bindString(1, mic_a);
        }
        stmt.bindLong(2, entity.getMic_a_status());
 
        String mic_b = entity.getMic_b();
        if (mic_b != null) {
            stmt.bindString(3, mic_b);
        }
        stmt.bindLong(4, entity.getMic_b_status());
 
        String mic_c = entity.getMic_c();
        if (mic_c != null) {
            stmt.bindString(5, mic_c);
        }
        stmt.bindLong(6, entity.getMic_c_status());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public MicDatas readEntity(Cursor cursor, int offset) {
        MicDatas entity = new MicDatas( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // mic_a
            cursor.getInt(offset + 1), // mic_a_status
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mic_b
            cursor.getInt(offset + 3), // mic_b_status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // mic_c
            cursor.getInt(offset + 5) // mic_c_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MicDatas entity, int offset) {
        entity.setMic_a(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMic_a_status(cursor.getInt(offset + 1));
        entity.setMic_b(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMic_b_status(cursor.getInt(offset + 3));
        entity.setMic_c(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMic_c_status(cursor.getInt(offset + 5));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(MicDatas entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(MicDatas entity) {
        return null;
    }

    @Override
    public boolean hasKey(MicDatas entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
