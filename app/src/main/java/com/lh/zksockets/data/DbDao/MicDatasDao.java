package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.MicDatas;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MIC_DATAS".
*/
public class MicDatasDao extends AbstractDao<MicDatas, Long> {

    public static final String TABLENAME = "MIC_DATAS";

    /**
     * Properties of entity MicDatas.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Mic_id = new Property(0, Long.class, "mic_id", true, "_id");
        public final static Property Mic_index = new Property(1, String.class, "mic_index", false, "MIC_INDEX");
        public final static Property Mic_status = new Property(2, int.class, "mic_status", false, "MIC_STATUS");
    }


    public MicDatasDao(DaoConfig config) {
        super(config);
    }
    
    public MicDatasDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MIC_DATAS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: mic_id
                "\"MIC_INDEX\" TEXT," + // 1: mic_index
                "\"MIC_STATUS\" INTEGER NOT NULL );"); // 2: mic_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MIC_DATAS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MicDatas entity) {
        stmt.clearBindings();
 
        Long mic_id = entity.getMic_id();
        if (mic_id != null) {
            stmt.bindLong(1, mic_id);
        }
 
        String mic_index = entity.getMic_index();
        if (mic_index != null) {
            stmt.bindString(2, mic_index);
        }
        stmt.bindLong(3, entity.getMic_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MicDatas entity) {
        stmt.clearBindings();
 
        Long mic_id = entity.getMic_id();
        if (mic_id != null) {
            stmt.bindLong(1, mic_id);
        }
 
        String mic_index = entity.getMic_index();
        if (mic_index != null) {
            stmt.bindString(2, mic_index);
        }
        stmt.bindLong(3, entity.getMic_status());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MicDatas readEntity(Cursor cursor, int offset) {
        MicDatas entity = new MicDatas( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // mic_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // mic_index
            cursor.getInt(offset + 2) // mic_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MicDatas entity, int offset) {
        entity.setMic_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMic_index(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMic_status(cursor.getInt(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MicDatas entity, long rowId) {
        entity.setMic_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MicDatas entity) {
        if(entity != null) {
            return entity.getMic_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MicDatas entity) {
        return entity.getMic_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
