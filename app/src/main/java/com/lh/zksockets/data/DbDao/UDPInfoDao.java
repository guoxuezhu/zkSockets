package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.UDPInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "UDPINFO".
*/
public class UDPInfoDao extends AbstractDao<UDPInfo, Void> {

    public static final String TABLENAME = "UDPINFO";

    /**
     * Properties of entity UDPInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Wlip = new Property(0, String.class, "wlip", false, "WLIP");
        public final static Property DiannaoIP = new Property(1, String.class, "diannaoIP", false, "DIANNAO_IP");
        public final static Property DiannaoPort = new Property(2, int.class, "diannaoPort", false, "DIANNAO_PORT");
        public final static Property DiannaoMl = new Property(3, String.class, "diannaoMl", false, "DIANNAO_ML");
    }


    public UDPInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UDPInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UDPINFO\" (" + //
                "\"WLIP\" TEXT," + // 0: wlip
                "\"DIANNAO_IP\" TEXT," + // 1: diannaoIP
                "\"DIANNAO_PORT\" INTEGER NOT NULL ," + // 2: diannaoPort
                "\"DIANNAO_ML\" TEXT);"); // 3: diannaoMl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UDPINFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UDPInfo entity) {
        stmt.clearBindings();
 
        String wlip = entity.getWlip();
        if (wlip != null) {
            stmt.bindString(1, wlip);
        }
 
        String diannaoIP = entity.getDiannaoIP();
        if (diannaoIP != null) {
            stmt.bindString(2, diannaoIP);
        }
        stmt.bindLong(3, entity.getDiannaoPort());
 
        String diannaoMl = entity.getDiannaoMl();
        if (diannaoMl != null) {
            stmt.bindString(4, diannaoMl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UDPInfo entity) {
        stmt.clearBindings();
 
        String wlip = entity.getWlip();
        if (wlip != null) {
            stmt.bindString(1, wlip);
        }
 
        String diannaoIP = entity.getDiannaoIP();
        if (diannaoIP != null) {
            stmt.bindString(2, diannaoIP);
        }
        stmt.bindLong(3, entity.getDiannaoPort());
 
        String diannaoMl = entity.getDiannaoMl();
        if (diannaoMl != null) {
            stmt.bindString(4, diannaoMl);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public UDPInfo readEntity(Cursor cursor, int offset) {
        UDPInfo entity = new UDPInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // wlip
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // diannaoIP
            cursor.getInt(offset + 2), // diannaoPort
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // diannaoMl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UDPInfo entity, int offset) {
        entity.setWlip(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDiannaoIP(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDiannaoPort(cursor.getInt(offset + 2));
        entity.setDiannaoMl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(UDPInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(UDPInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(UDPInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
