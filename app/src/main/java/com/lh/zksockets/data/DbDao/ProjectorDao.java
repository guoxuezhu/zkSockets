package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.Projector;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PROJECTOR".
*/
public class ProjectorDao extends AbstractDao<Projector, Long> {

    public static final String TABLENAME = "PROJECTOR";

    /**
     * Properties of entity Projector.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property SerialPort = new Property(2, String.class, "serialPort", false, "SERIAL_PORT");
        public final static Property SerialPortId = new Property(3, int.class, "serialPortId", false, "SERIAL_PORT_ID");
        public final static Property BaudRate = new Property(4, String.class, "baudRate", false, "BAUD_RATE");
        public final static Property BaudRateId = new Property(5, int.class, "baudRateId", false, "BAUD_RATE_ID");
        public final static Property CheckoutBit = new Property(6, String.class, "checkoutBit", false, "CHECKOUT_BIT");
        public final static Property CheckoutBitId = new Property(7, int.class, "checkoutBitId", false, "CHECKOUT_BIT_ID");
        public final static Property DataBit = new Property(8, String.class, "dataBit", false, "DATA_BIT");
        public final static Property DataBitId = new Property(9, int.class, "dataBitId", false, "DATA_BIT_ID");
        public final static Property StopBit = new Property(10, String.class, "stopBit", false, "STOP_BIT");
        public final static Property StopBitId = new Property(11, int.class, "stopBitId", false, "STOP_BIT_ID");
        public final static Property Type = new Property(12, String.class, "type", false, "TYPE");
        public final static Property TypeId = new Property(13, int.class, "typeId", false, "TYPE_ID");
        public final static Property OpenCommand = new Property(14, String.class, "openCommand", false, "OPEN_COMMAND");
        public final static Property ClosedCommand = new Property(15, String.class, "closedCommand", false, "CLOSED_COMMAND");
        public final static Property VGACommand = new Property(16, String.class, "VGACommand", false, "VGACOMMAND");
        public final static Property HDMICommand = new Property(17, String.class, "HDMICommand", false, "HDMICOMMAND");
        public final static Property JiChazuo = new Property(18, String.class, "jiChazuo", false, "JI_CHAZUO");
        public final static Property JiChazuoId = new Property(19, int.class, "jiChazuoId", false, "JI_CHAZUO_ID");
        public final static Property BuChazuo = new Property(20, String.class, "buChazuo", false, "BU_CHAZUO");
        public final static Property BuChazuoId = new Property(21, int.class, "buChazuoId", false, "BU_CHAZUO_ID");
    }


    public ProjectorDao(DaoConfig config) {
        super(config);
    }
    
    public ProjectorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PROJECTOR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"SERIAL_PORT\" TEXT," + // 2: serialPort
                "\"SERIAL_PORT_ID\" INTEGER NOT NULL ," + // 3: serialPortId
                "\"BAUD_RATE\" TEXT," + // 4: baudRate
                "\"BAUD_RATE_ID\" INTEGER NOT NULL ," + // 5: baudRateId
                "\"CHECKOUT_BIT\" TEXT," + // 6: checkoutBit
                "\"CHECKOUT_BIT_ID\" INTEGER NOT NULL ," + // 7: checkoutBitId
                "\"DATA_BIT\" TEXT," + // 8: dataBit
                "\"DATA_BIT_ID\" INTEGER NOT NULL ," + // 9: dataBitId
                "\"STOP_BIT\" TEXT," + // 10: stopBit
                "\"STOP_BIT_ID\" INTEGER NOT NULL ," + // 11: stopBitId
                "\"TYPE\" TEXT," + // 12: type
                "\"TYPE_ID\" INTEGER NOT NULL ," + // 13: typeId
                "\"OPEN_COMMAND\" TEXT," + // 14: openCommand
                "\"CLOSED_COMMAND\" TEXT," + // 15: closedCommand
                "\"VGACOMMAND\" TEXT," + // 16: VGACommand
                "\"HDMICOMMAND\" TEXT," + // 17: HDMICommand
                "\"JI_CHAZUO\" TEXT," + // 18: jiChazuo
                "\"JI_CHAZUO_ID\" INTEGER NOT NULL ," + // 19: jiChazuoId
                "\"BU_CHAZUO\" TEXT," + // 20: buChazuo
                "\"BU_CHAZUO_ID\" INTEGER NOT NULL );"); // 21: buChazuoId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PROJECTOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Projector entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String serialPort = entity.getSerialPort();
        if (serialPort != null) {
            stmt.bindString(3, serialPort);
        }
        stmt.bindLong(4, entity.getSerialPortId());
 
        String baudRate = entity.getBaudRate();
        if (baudRate != null) {
            stmt.bindString(5, baudRate);
        }
        stmt.bindLong(6, entity.getBaudRateId());
 
        String checkoutBit = entity.getCheckoutBit();
        if (checkoutBit != null) {
            stmt.bindString(7, checkoutBit);
        }
        stmt.bindLong(8, entity.getCheckoutBitId());
 
        String dataBit = entity.getDataBit();
        if (dataBit != null) {
            stmt.bindString(9, dataBit);
        }
        stmt.bindLong(10, entity.getDataBitId());
 
        String stopBit = entity.getStopBit();
        if (stopBit != null) {
            stmt.bindString(11, stopBit);
        }
        stmt.bindLong(12, entity.getStopBitId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getTypeId());
 
        String openCommand = entity.getOpenCommand();
        if (openCommand != null) {
            stmt.bindString(15, openCommand);
        }
 
        String closedCommand = entity.getClosedCommand();
        if (closedCommand != null) {
            stmt.bindString(16, closedCommand);
        }
 
        String VGACommand = entity.getVGACommand();
        if (VGACommand != null) {
            stmt.bindString(17, VGACommand);
        }
 
        String HDMICommand = entity.getHDMICommand();
        if (HDMICommand != null) {
            stmt.bindString(18, HDMICommand);
        }
 
        String jiChazuo = entity.getJiChazuo();
        if (jiChazuo != null) {
            stmt.bindString(19, jiChazuo);
        }
        stmt.bindLong(20, entity.getJiChazuoId());
 
        String buChazuo = entity.getBuChazuo();
        if (buChazuo != null) {
            stmt.bindString(21, buChazuo);
        }
        stmt.bindLong(22, entity.getBuChazuoId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Projector entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String serialPort = entity.getSerialPort();
        if (serialPort != null) {
            stmt.bindString(3, serialPort);
        }
        stmt.bindLong(4, entity.getSerialPortId());
 
        String baudRate = entity.getBaudRate();
        if (baudRate != null) {
            stmt.bindString(5, baudRate);
        }
        stmt.bindLong(6, entity.getBaudRateId());
 
        String checkoutBit = entity.getCheckoutBit();
        if (checkoutBit != null) {
            stmt.bindString(7, checkoutBit);
        }
        stmt.bindLong(8, entity.getCheckoutBitId());
 
        String dataBit = entity.getDataBit();
        if (dataBit != null) {
            stmt.bindString(9, dataBit);
        }
        stmt.bindLong(10, entity.getDataBitId());
 
        String stopBit = entity.getStopBit();
        if (stopBit != null) {
            stmt.bindString(11, stopBit);
        }
        stmt.bindLong(12, entity.getStopBitId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(13, type);
        }
        stmt.bindLong(14, entity.getTypeId());
 
        String openCommand = entity.getOpenCommand();
        if (openCommand != null) {
            stmt.bindString(15, openCommand);
        }
 
        String closedCommand = entity.getClosedCommand();
        if (closedCommand != null) {
            stmt.bindString(16, closedCommand);
        }
 
        String VGACommand = entity.getVGACommand();
        if (VGACommand != null) {
            stmt.bindString(17, VGACommand);
        }
 
        String HDMICommand = entity.getHDMICommand();
        if (HDMICommand != null) {
            stmt.bindString(18, HDMICommand);
        }
 
        String jiChazuo = entity.getJiChazuo();
        if (jiChazuo != null) {
            stmt.bindString(19, jiChazuo);
        }
        stmt.bindLong(20, entity.getJiChazuoId());
 
        String buChazuo = entity.getBuChazuo();
        if (buChazuo != null) {
            stmt.bindString(21, buChazuo);
        }
        stmt.bindLong(22, entity.getBuChazuoId());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Projector readEntity(Cursor cursor, int offset) {
        Projector entity = new Projector( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serialPort
            cursor.getInt(offset + 3), // serialPortId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // baudRate
            cursor.getInt(offset + 5), // baudRateId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // checkoutBit
            cursor.getInt(offset + 7), // checkoutBitId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dataBit
            cursor.getInt(offset + 9), // dataBitId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // stopBit
            cursor.getInt(offset + 11), // stopBitId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // type
            cursor.getInt(offset + 13), // typeId
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // openCommand
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // closedCommand
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // VGACommand
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // HDMICommand
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // jiChazuo
            cursor.getInt(offset + 19), // jiChazuoId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // buChazuo
            cursor.getInt(offset + 21) // buChazuoId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Projector entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setSerialPort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSerialPortId(cursor.getInt(offset + 3));
        entity.setBaudRate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBaudRateId(cursor.getInt(offset + 5));
        entity.setCheckoutBit(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheckoutBitId(cursor.getInt(offset + 7));
        entity.setDataBit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDataBitId(cursor.getInt(offset + 9));
        entity.setStopBit(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStopBitId(cursor.getInt(offset + 11));
        entity.setType(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTypeId(cursor.getInt(offset + 13));
        entity.setOpenCommand(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setClosedCommand(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setVGACommand(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setHDMICommand(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setJiChazuo(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setJiChazuoId(cursor.getInt(offset + 19));
        entity.setBuChazuo(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setBuChazuoId(cursor.getInt(offset + 21));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Projector entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Projector entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Projector entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
