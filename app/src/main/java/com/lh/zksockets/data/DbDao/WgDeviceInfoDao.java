package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.WgDeviceInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WG_DEVICE_INFO".
*/
public class WgDeviceInfoDao extends AbstractDao<WgDeviceInfo, Long> {

    public static final String TABLENAME = "WG_DEVICE_INFO";

    /**
     * Properties of entity WgDeviceInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LongId = new Property(0, Long.class, "longId", true, "_id");
        public final static Property Deviceid = new Property(1, int.class, "deviceid", false, "DEVICEID");
        public final static Property StringId = new Property(2, String.class, "stringId", false, "STRING_ID");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Port = new Property(4, int.class, "port", false, "PORT");
        public final static Property Agreement = new Property(5, int.class, "agreement", false, "AGREEMENT");
        public final static Property Serial = new Property(6, int.class, "serial", false, "SERIAL");
        public final static Property Poweronctm = new Property(7, int.class, "poweronctm", false, "POWERONCTM");
        public final static Property Cts = new Property(8, int.class, "cts", false, "CTS");
        public final static Property On = new Property(9, boolean.class, "on", false, "ON");
        public final static Property Attr = new Property(10, String.class, "attr", false, "ATTR");
        public final static Property Bir = new Property(11, int.class, "bir", false, "BIR");
        public final static Property Current = new Property(12, int.class, "current", false, "CURRENT");
        public final static Property Voltage = new Property(13, int.class, "voltage", false, "VOLTAGE");
        public final static Property Energy = new Property(14, int.class, "energy", false, "ENERGY");
        public final static Property Power = new Property(15, int.class, "power", false, "POWER");
        public final static Property Mtemp = new Property(16, double.class, "mtemp", false, "MTEMP");
        public final static Property Mhumi = new Property(17, double.class, "mhumi", false, "MHUMI");
        public final static Property Pm25 = new Property(18, int.class, "pm25", false, "PM25");
    }


    public WgDeviceInfoDao(DaoConfig config) {
        super(config);
    }
    
    public WgDeviceInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WG_DEVICE_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: longId
                "\"DEVICEID\" INTEGER NOT NULL ," + // 1: deviceid
                "\"STRING_ID\" TEXT," + // 2: stringId
                "\"NAME\" TEXT," + // 3: name
                "\"PORT\" INTEGER NOT NULL ," + // 4: port
                "\"AGREEMENT\" INTEGER NOT NULL ," + // 5: agreement
                "\"SERIAL\" INTEGER NOT NULL ," + // 6: serial
                "\"POWERONCTM\" INTEGER NOT NULL ," + // 7: poweronctm
                "\"CTS\" INTEGER NOT NULL ," + // 8: cts
                "\"ON\" INTEGER NOT NULL ," + // 9: on
                "\"ATTR\" TEXT," + // 10: attr
                "\"BIR\" INTEGER NOT NULL ," + // 11: bir
                "\"CURRENT\" INTEGER NOT NULL ," + // 12: current
                "\"VOLTAGE\" INTEGER NOT NULL ," + // 13: voltage
                "\"ENERGY\" INTEGER NOT NULL ," + // 14: energy
                "\"POWER\" INTEGER NOT NULL ," + // 15: power
                "\"MTEMP\" REAL NOT NULL ," + // 16: mtemp
                "\"MHUMI\" REAL NOT NULL ," + // 17: mhumi
                "\"PM25\" INTEGER NOT NULL );"); // 18: pm25
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WG_DEVICE_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WgDeviceInfo entity) {
        stmt.clearBindings();
 
        Long longId = entity.getLongId();
        if (longId != null) {
            stmt.bindLong(1, longId);
        }
        stmt.bindLong(2, entity.getDeviceid());
 
        String stringId = entity.getStringId();
        if (stringId != null) {
            stmt.bindString(3, stringId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getPort());
        stmt.bindLong(6, entity.getAgreement());
        stmt.bindLong(7, entity.getSerial());
        stmt.bindLong(8, entity.getPoweronctm());
        stmt.bindLong(9, entity.getCts());
        stmt.bindLong(10, entity.getOn() ? 1L: 0L);
 
        String attr = entity.getAttr();
        if (attr != null) {
            stmt.bindString(11, attr);
        }
        stmt.bindLong(12, entity.getBir());
        stmt.bindLong(13, entity.getCurrent());
        stmt.bindLong(14, entity.getVoltage());
        stmt.bindLong(15, entity.getEnergy());
        stmt.bindLong(16, entity.getPower());
        stmt.bindDouble(17, entity.getMtemp());
        stmt.bindDouble(18, entity.getMhumi());
        stmt.bindLong(19, entity.getPm25());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WgDeviceInfo entity) {
        stmt.clearBindings();
 
        Long longId = entity.getLongId();
        if (longId != null) {
            stmt.bindLong(1, longId);
        }
        stmt.bindLong(2, entity.getDeviceid());
 
        String stringId = entity.getStringId();
        if (stringId != null) {
            stmt.bindString(3, stringId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
        stmt.bindLong(5, entity.getPort());
        stmt.bindLong(6, entity.getAgreement());
        stmt.bindLong(7, entity.getSerial());
        stmt.bindLong(8, entity.getPoweronctm());
        stmt.bindLong(9, entity.getCts());
        stmt.bindLong(10, entity.getOn() ? 1L: 0L);
 
        String attr = entity.getAttr();
        if (attr != null) {
            stmt.bindString(11, attr);
        }
        stmt.bindLong(12, entity.getBir());
        stmt.bindLong(13, entity.getCurrent());
        stmt.bindLong(14, entity.getVoltage());
        stmt.bindLong(15, entity.getEnergy());
        stmt.bindLong(16, entity.getPower());
        stmt.bindDouble(17, entity.getMtemp());
        stmt.bindDouble(18, entity.getMhumi());
        stmt.bindLong(19, entity.getPm25());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WgDeviceInfo readEntity(Cursor cursor, int offset) {
        WgDeviceInfo entity = new WgDeviceInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // longId
            cursor.getInt(offset + 1), // deviceid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // stringId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.getInt(offset + 4), // port
            cursor.getInt(offset + 5), // agreement
            cursor.getInt(offset + 6), // serial
            cursor.getInt(offset + 7), // poweronctm
            cursor.getInt(offset + 8), // cts
            cursor.getShort(offset + 9) != 0, // on
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // attr
            cursor.getInt(offset + 11), // bir
            cursor.getInt(offset + 12), // current
            cursor.getInt(offset + 13), // voltage
            cursor.getInt(offset + 14), // energy
            cursor.getInt(offset + 15), // power
            cursor.getDouble(offset + 16), // mtemp
            cursor.getDouble(offset + 17), // mhumi
            cursor.getInt(offset + 18) // pm25
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WgDeviceInfo entity, int offset) {
        entity.setLongId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDeviceid(cursor.getInt(offset + 1));
        entity.setStringId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPort(cursor.getInt(offset + 4));
        entity.setAgreement(cursor.getInt(offset + 5));
        entity.setSerial(cursor.getInt(offset + 6));
        entity.setPoweronctm(cursor.getInt(offset + 7));
        entity.setCts(cursor.getInt(offset + 8));
        entity.setOn(cursor.getShort(offset + 9) != 0);
        entity.setAttr(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBir(cursor.getInt(offset + 11));
        entity.setCurrent(cursor.getInt(offset + 12));
        entity.setVoltage(cursor.getInt(offset + 13));
        entity.setEnergy(cursor.getInt(offset + 14));
        entity.setPower(cursor.getInt(offset + 15));
        entity.setMtemp(cursor.getDouble(offset + 16));
        entity.setMhumi(cursor.getDouble(offset + 17));
        entity.setPm25(cursor.getInt(offset + 18));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WgDeviceInfo entity, long rowId) {
        entity.setLongId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WgDeviceInfo entity) {
        if(entity != null) {
            return entity.getLongId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WgDeviceInfo entity) {
        return entity.getLongId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
