package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.SerialCommand;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SERIAL_COMMAND".
*/
public class SerialCommandDao extends AbstractDao<SerialCommand, Long> {

    public static final String TABLENAME = "SERIAL_COMMAND";

    /**
     * Properties of entity SerialCommand.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SKey = new Property(0, Long.class, "sKey", true, "_id");
        public final static Property SId = new Property(1, int.class, "sId", false, "S_ID");
        public final static Property MlId = new Property(2, int.class, "mlId", false, "ML_ID");
        public final static Property CommandId = new Property(3, String.class, "commandId", false, "COMMAND_ID");
        public final static Property CommandName = new Property(4, String.class, "commandName", false, "COMMAND_NAME");
        public final static Property CommandStr = new Property(5, String.class, "commandStr", false, "COMMAND_STR");
    }


    public SerialCommandDao(DaoConfig config) {
        super(config);
    }
    
    public SerialCommandDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SERIAL_COMMAND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: sKey
                "\"S_ID\" INTEGER NOT NULL ," + // 1: sId
                "\"ML_ID\" INTEGER NOT NULL ," + // 2: mlId
                "\"COMMAND_ID\" TEXT," + // 3: commandId
                "\"COMMAND_NAME\" TEXT," + // 4: commandName
                "\"COMMAND_STR\" TEXT);"); // 5: commandStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SERIAL_COMMAND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SerialCommand entity) {
        stmt.clearBindings();
 
        Long sKey = entity.getSKey();
        if (sKey != null) {
            stmt.bindLong(1, sKey);
        }
        stmt.bindLong(2, entity.getSId());
        stmt.bindLong(3, entity.getMlId());
 
        String commandId = entity.getCommandId();
        if (commandId != null) {
            stmt.bindString(4, commandId);
        }
 
        String commandName = entity.getCommandName();
        if (commandName != null) {
            stmt.bindString(5, commandName);
        }
 
        String commandStr = entity.getCommandStr();
        if (commandStr != null) {
            stmt.bindString(6, commandStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SerialCommand entity) {
        stmt.clearBindings();
 
        Long sKey = entity.getSKey();
        if (sKey != null) {
            stmt.bindLong(1, sKey);
        }
        stmt.bindLong(2, entity.getSId());
        stmt.bindLong(3, entity.getMlId());
 
        String commandId = entity.getCommandId();
        if (commandId != null) {
            stmt.bindString(4, commandId);
        }
 
        String commandName = entity.getCommandName();
        if (commandName != null) {
            stmt.bindString(5, commandName);
        }
 
        String commandStr = entity.getCommandStr();
        if (commandStr != null) {
            stmt.bindString(6, commandStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SerialCommand readEntity(Cursor cursor, int offset) {
        SerialCommand entity = new SerialCommand( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // sKey
            cursor.getInt(offset + 1), // sId
            cursor.getInt(offset + 2), // mlId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // commandId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // commandName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // commandStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SerialCommand entity, int offset) {
        entity.setSKey(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSId(cursor.getInt(offset + 1));
        entity.setMlId(cursor.getInt(offset + 2));
        entity.setCommandId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCommandName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCommandStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SerialCommand entity, long rowId) {
        entity.setSKey(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SerialCommand entity) {
        if(entity != null) {
            return entity.getSKey();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SerialCommand entity) {
        return entity.getSKey() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
