package com.lh.zksockets.data.DbDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lh.zksockets.data.model.KongTiaoData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KONG_TIAO_DATA".
*/
public class KongTiaoDataDao extends AbstractDao<KongTiaoData, Void> {

    public static final String TABLENAME = "KONG_TIAO_DATA";

    /**
     * Properties of entity KongTiaoData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Wenstr_re = new Property(0, String.class, "wenstr_re", false, "WENSTR_RE");
        public final static Property Re_timeStart = new Property(1, String.class, "re_timeStart", false, "RE_TIME_START");
        public final static Property Re_timeEnd = new Property(2, String.class, "re_timeEnd", false, "RE_TIME_END");
        public final static Property Re_ml = new Property(3, String.class, "re_ml", false, "RE_ML");
        public final static Property Wenstr_leng = new Property(4, String.class, "wenstr_leng", false, "WENSTR_LENG");
        public final static Property Leng_timeStart = new Property(5, String.class, "leng_timeStart", false, "LENG_TIME_START");
        public final static Property Leng_timeEnd = new Property(6, String.class, "leng_timeEnd", false, "LENG_TIME_END");
        public final static Property Leng_ml = new Property(7, String.class, "leng_ml", false, "LENG_ML");
        public final static Property Kt_status = new Property(8, int.class, "kt_status", false, "KT_STATUS");
    }


    public KongTiaoDataDao(DaoConfig config) {
        super(config);
    }
    
    public KongTiaoDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KONG_TIAO_DATA\" (" + //
                "\"WENSTR_RE\" TEXT," + // 0: wenstr_re
                "\"RE_TIME_START\" TEXT," + // 1: re_timeStart
                "\"RE_TIME_END\" TEXT," + // 2: re_timeEnd
                "\"RE_ML\" TEXT," + // 3: re_ml
                "\"WENSTR_LENG\" TEXT," + // 4: wenstr_leng
                "\"LENG_TIME_START\" TEXT," + // 5: leng_timeStart
                "\"LENG_TIME_END\" TEXT," + // 6: leng_timeEnd
                "\"LENG_ML\" TEXT," + // 7: leng_ml
                "\"KT_STATUS\" INTEGER NOT NULL );"); // 8: kt_status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KONG_TIAO_DATA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KongTiaoData entity) {
        stmt.clearBindings();
 
        String wenstr_re = entity.getWenstr_re();
        if (wenstr_re != null) {
            stmt.bindString(1, wenstr_re);
        }
 
        String re_timeStart = entity.getRe_timeStart();
        if (re_timeStart != null) {
            stmt.bindString(2, re_timeStart);
        }
 
        String re_timeEnd = entity.getRe_timeEnd();
        if (re_timeEnd != null) {
            stmt.bindString(3, re_timeEnd);
        }
 
        String re_ml = entity.getRe_ml();
        if (re_ml != null) {
            stmt.bindString(4, re_ml);
        }
 
        String wenstr_leng = entity.getWenstr_leng();
        if (wenstr_leng != null) {
            stmt.bindString(5, wenstr_leng);
        }
 
        String leng_timeStart = entity.getLeng_timeStart();
        if (leng_timeStart != null) {
            stmt.bindString(6, leng_timeStart);
        }
 
        String leng_timeEnd = entity.getLeng_timeEnd();
        if (leng_timeEnd != null) {
            stmt.bindString(7, leng_timeEnd);
        }
 
        String leng_ml = entity.getLeng_ml();
        if (leng_ml != null) {
            stmt.bindString(8, leng_ml);
        }
        stmt.bindLong(9, entity.getKt_status());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KongTiaoData entity) {
        stmt.clearBindings();
 
        String wenstr_re = entity.getWenstr_re();
        if (wenstr_re != null) {
            stmt.bindString(1, wenstr_re);
        }
 
        String re_timeStart = entity.getRe_timeStart();
        if (re_timeStart != null) {
            stmt.bindString(2, re_timeStart);
        }
 
        String re_timeEnd = entity.getRe_timeEnd();
        if (re_timeEnd != null) {
            stmt.bindString(3, re_timeEnd);
        }
 
        String re_ml = entity.getRe_ml();
        if (re_ml != null) {
            stmt.bindString(4, re_ml);
        }
 
        String wenstr_leng = entity.getWenstr_leng();
        if (wenstr_leng != null) {
            stmt.bindString(5, wenstr_leng);
        }
 
        String leng_timeStart = entity.getLeng_timeStart();
        if (leng_timeStart != null) {
            stmt.bindString(6, leng_timeStart);
        }
 
        String leng_timeEnd = entity.getLeng_timeEnd();
        if (leng_timeEnd != null) {
            stmt.bindString(7, leng_timeEnd);
        }
 
        String leng_ml = entity.getLeng_ml();
        if (leng_ml != null) {
            stmt.bindString(8, leng_ml);
        }
        stmt.bindLong(9, entity.getKt_status());
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public KongTiaoData readEntity(Cursor cursor, int offset) {
        KongTiaoData entity = new KongTiaoData( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // wenstr_re
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // re_timeStart
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // re_timeEnd
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // re_ml
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wenstr_leng
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // leng_timeStart
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // leng_timeEnd
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // leng_ml
            cursor.getInt(offset + 8) // kt_status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KongTiaoData entity, int offset) {
        entity.setWenstr_re(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setRe_timeStart(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRe_timeEnd(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRe_ml(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWenstr_leng(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLeng_timeStart(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLeng_timeEnd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLeng_ml(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setKt_status(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(KongTiaoData entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(KongTiaoData entity) {
        return null;
    }

    @Override
    public boolean hasKey(KongTiaoData entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
